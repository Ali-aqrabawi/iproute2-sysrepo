module iproute2-ip-link {
    yang-version 1.1;
    namespace "urn:okda:iproute2:ip:link";
    prefix iplink;

    import ietf-inet-types { prefix inet; }
    import ietf-yang-types { prefix yang;}
    import iproute2-cmdgen-extensions { prefix ipr2cgen; }
    import iproute2-ip-netns { prefix ipnetns; }

    organization
        "Okda Networks";

    contact
        "Author: Ali Aqrabawi
        <aaqrabaw@okdanetworks.com>";

    description

        "This module contain the iproute2 'ip link' configurations ,
        this is module contains all IP-LINK (8) related configs,
        refer to https://manpages.debian.org/unstable/iproute2/ip-link.8.en.html";

    revision "2024-02-13" {
        description "Revision 1";
        reference
            "YANG model for iproute2 ip link case.";
    }

    /*
    * Typedefs
    */

    typedef ipv4-with-cider{
    // we can't use inet, as libyang does subnetting to inet:ipv4-prefix.
        type string {
            pattern
                '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}'
                +  '([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'
                + '/(([0-9])|([1-2][0-9])|(3[0-2]))';
        }
        description
            "ipv4 address with mask, e.g: 192.168.1.1/24";
    }
    typedef ipv6-with-cider {
        type string {
            pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}'
            + '((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|'
            + '(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}'
            + '(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))'
            + '(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))';
            pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|'
            + '((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)'
            + '(/.+)';
        }
        description
            "ipv6 address with mask, e.g: 201::4/64";
    }
    typedef ip-address-with-cider {
        type union {
            type ipv4-with-cider;
            type ipv6-with-cider;
        }
        description
            "The ip-prefix type represents an IP prefix and is IP
            version neutral.  The format of the textual representations
            implies the IP version.";
    }
    typedef vrf-ref {
        type leafref {
            path "/iplink:links/iplink:vrf/iplink:name";
        }
        description
            "This type is used by data models that need to reference
            interfaces.";
    }
    typedef link-ref {
        type leafref {
            path "/iplink:links/iplink:link/iplink:name";
        }
        description
            "This type is used by data models that need to reference
            interfaces.";
    }
    typedef vti-ref {
        type leafref {
            path "/iplink:links/iplink:vti/iplink:name";
        }
        description
            "This type is used by data models that need to reference
            interfaces.";
    }
    typedef vlan-ref {
        type leafref {
            path "/iplink:links/iplink:vlan/iplink:name";
        }
        description
            "This type is used by data models that need to reference vlan
            interfaces.";
    }
    typedef bridge-ref {
        type leafref {
            path "/iplink:links/iplink:bridge/iplink:name";
        }
        description
            "This type is used by data models that need to reference bridge
            interfaces.";
    }
    typedef gre-ref {
        type leafref {
            path "/iplink:links/iplink:gre/iplink:name";
        }
        description
            "This type is used by data models that need to reference gre
            interfaces.";
    }
    typedef l3-links-ref {
        type union{
            type link-ref;
            type vti-ref;
            type gre-ref;
        }
    }

    /*
    * Identities
    */

    identity link-type {
        description
            "Base identity for ip link types.";
    }

    identity oper-link-type {
        description
            "Base identity for non-configurable ip link types.";
    }

    identity bond {
        base link-type;
        description
            "Bonding device.";
    }

    identity can {
        base link-type;
        description
            "Controller Area Network.";
    }

    identity dsa {
        base link-type;
        description
            "Distributed Switch Architecture.";
    }

    identity dummy {
        base link-type;
        description
            "Dummy network interface.";
    }

    identity gretap {
        base link-type;
        description
            "Virtual L2 tunnel interface GRE over IPv4.";
    }

    identity ifb {
        base link-type;
        description
            "Intermediate Functional Block device.";
    }

    identity ip6tnl {
        base link-type;
        description
            "Virtual tunnel interface IPv4|IPv6 over IPv6.";
    }

    identity ipvlan {
        base link-type;
        description
            "Interface for L3 (IPv6/IPv4) based VLANs.";
    }

    identity ipvtap {
        base link-type;
        description
            "Interface for L3 (IPv6/IPv4) based VLANs and TAP.";
    }

    identity lowpan {
        base link-type;
        description
            "Interface for 6LoWPAN (IPv6) over IEEE 802.15.4 / Bluetooth.";
    }

    identity netdevsim {
        base link-type;
        description
            "Interface for netdev API tests.";
    }

    identity nlmonipvtap {
        base link-type;
        description
            "Netlink monitoring device.";
    }

    identity vcan {
        base link-type;
        description
            "Virtual Controller Area Network interface.";
    }

    identity virt_wifi {
        base link-type;
        description
            "rtnetlink wifi simulation device.";
    }

    identity veth {
        base link-type;
        description
            "veth device.";
    }

    identity vxcan {
        base link-type;
        description
            "vxcan device.";
    }

    identity ether {
        base oper-link-type;
        description
            "ethernet device.";
    }

    identity loopback {
        base oper-link-type;
        description
            "loopback device.";
    }

    /*
    * groupings
    */

    grouping link-essentials{

        leaf mtu {
            type uint16{
                range "64..9000";
            }
            default 1500;
            description "specifies the mtu size for the device";
        }
        leaf admin-status{
            description "set admin status for the link";
            ipr2cgen:value-only;
            ipr2cgen:oper-arg-name "flags";
            ipr2cgen:oper-flag-map "UP:up;FLAG-UNSET:down";
            type enumeration {
                enum "up";
                enum "down";
            }
            default "down";
        }
        leaf index {
            ipr2cgen:oper-arg-name "ifindex";
            type uint64;
            description "specifies the desired index of the new virtual device.
            The link creation fails, if the index is busy.";
        }
        leaf vrf {
            ipr2cgen:on-node-delete "nomaster";
            type leafref {
                path "../../vrf/name";
            }
            description "add the interface to vrf";
        }
        choice netns {
            description "create the device in the network namespace associated with process
            PID or the name NETNSNAME or the file NETNSFILE.";
            case process-id {
                description "create the device in the network namespace associated with process";
                leaf pid {
                    ipr2cgen:arg-name "netns";
                    type uint64;
                    description "process id";
                }
            }
            case name {
                description "create the device in the network namespace associated with name NETNSNAME";
                leaf netnsname {
                    ipr2cgen:arg-name "netns";
                    type ipnetns:netns-ref;
                    description "network namespace name";
                }
            }
            case file {
                description "create the device in the network namespace associated with file NETNSFILE";
                leaf netnsfile {
                    ipr2cgen:arg-name "netns";
                    type string;
                    description "network namespace file";
                }
            }
        }
        leaf group {
            description "specify group id that this link belong to,
            GROUP has a dual role: If both group and dev are present,
            then move the device to the specified group. If only a group is specified,
            then the change operates on all devices in that group.";
            ipr2cgen:oper-value-map "default:0";
            type uint64;
            default 0;
        }
    }

    grouping link-advance {
        leaf master{
            ipr2cgen:on-node-delete "nomaster";
            type union {
                type link-ref;
                type bridge-ref;
            }
            description "add the link to master link";
            must "../master != ../name" {
                error-message "cannot use same link as master link!";
            }
            must "(/links/link[name=current()/../master]/type = 'iplink:bond') or
            (/links/bridge[name=current()/../master])" {
                error-message "The master type must be 'bond' or 'bridge'.";
            }
        }
        container advance {
            leaf protodown {
                description "change the PROTODOWN state on the device.
                Indicates that a protocol error has been detected on the port.
                Switch drivers can react to this error by doing a phys down on the switch port.";
                type enumeration {
                    enum "on";
                    enum "off";
                }
                default "on";
            }
            leaf numtxqueues {
                ipr2cgen:oper-arg-name "num_tx_queues";
                type uint32;
                default 1;
                description "specifies the number of transmit queues for device.";
            }
            leaf numrxqueues {
                ipr2cgen:oper-arg-name "num_rx_queues";
                type uint32;
                default 1;
                description "specifies the number of receive queues for device.";
            }
            leaf gso_max_size {
                type uint32;
                default 65536;
                description "BYTES: specifies the recommended maximum size of a Generic Segment Offload packet
                the new device should accept. This is also used to enable BIG TCP for IPv6 on
                this device when the size is greater than 65536.";
            }
            leaf gso_ipv4_max_size {
                type uint32;
                default 65536;
                description "BYTES: specifies the recommended maximum size of a IPv4 Generic Segment Offload
                packet the new device should accept. This is especially used to enable BIG TCP for
                IPv4 on this device by setting to a size greater than 65536.";
            }
            leaf gso_max_segs {
                type uint32;
                default 65535;
                description "specifies the recommended maximum number of a Generic Segment
                Offload segments the device should accept.";
            }
            leaf gro_max_size {
                type uint32;
                default 65536;
                description "specifies the maximum size of a packet built by GRO stack on this device.
                This is also used for BIG TCP to allow the size of a merged IPv6 GSO
                packet on this device greater than 65536.";
            }
            leaf gro_ipv4_max_size {
                type uint32;
                default 65536;
                description "specifies the maximum size of a IPv4 packet built by GRO stack on this device.
                This is especially used for BIG TCP to allow the size of a merged IPv4 GSO packet on
                this device greater than 65536.";
            }
            leaf txqueuelen {
                description "change the transmit queue length of the device.";
                ipr2cgen:oper-arg-name "txqlen";
                type uint32;
                default 1000;
            }
        }
        container modes {
            description "set arb,mcast,promsi ... etc modes on the link";
            leaf arp {
                description "change the NOARP flag on the device.";
                ipr2cgen:oper-arg-name "flags";
                ipr2cgen:oper-flag-map "NOARP:off;FLAG-UNSET:on";
                type enumeration {
                    enum "on";
                    enum "off";
                }
                default "on";
            }
            leaf multicast {
                description "change the MULTICAST flag on the device.";
                ipr2cgen:oper-arg-name "flags";
                ipr2cgen:oper-flag-map "MULTICAST:on;FLAG-UNSET:off";
                type enumeration {
                    enum "on";
                    enum "off";
                }
                default "off";
            }
            leaf allmulticast {
                description "change the ALLMULTI flag on the device. When enabled,
                instructs network driver to retrieve all multicast packets from the network
                to the kernel for further processing.";
                ipr2cgen:oper-arg-name "flags";
                ipr2cgen:oper-flag-map "ALLMULTI:on;FLAG-UNSET:off";
                type enumeration {
                    enum "on";
                    enum "off";
                }
                default "off";
            }
            leaf promisc {
                ipr2cgen:oper-arg-name "promiscuity";
                ipr2cgen:oper-value-map "0:off;1:on";
                type enumeration {
                    enum "on";
                    enum "off";
                }
                description "change the PROMISC flag on the device. When enabled,
                activates promiscuous operation of the network device.";
                default "off";
            }
            leaf trailers {
                description "change the NOTRAILERS flag on the device,
                NOT used by the Linux and exists for BSD compatibility";
                ipr2cgen:oper-arg-name "flags";
                ipr2cgen:oper-flag-map "NOTRAILERS:off;FLAG-UNSET:on";
                type enumeration {
                    enum "on";
                    enum "off";
                }
                default "on";
            }
        }
    }

    grouping link-layer2{
        container lladdresses {
            description "configure lladdress for link, peer and broadcast addresses";
            leaf mac_addr{
                ipr2cgen:arg-name "address";
                ipr2cgen:oper-arg-name "address";
                type yang:mac-address;
                description "change the station address of the interface.";
            }
            leaf broadcast_addr {
                ipr2cgen:arg-name "broadcast";
                ipr2cgen:oper-arg-name "broadcast";
                type yang:mac-address;
                description "change the link layer broadcast address, when the interface is POINTOPOINT.";
            }
            leaf peer_addr {
                ipr2cgen:arg-name "peer";
                ipr2cgen:oper-arg-name "peer";
                type yang:mac-address;
                description "change the link layer peer address, when the interface is POINTOPOINT.";
            }
        }
    }
    grouping link-layer3{
        list ip {
            ipr2cgen:cmd-start;
            ipr2cgen:cmd-add "ip address add";
            ipr2cgen:cmd-update "ip address replace";
            ipr2cgen:cmd-delete "ip address del";
            ipr2cgen:oper-arg-name "addr_info";
            description "link ipv4 address";
            key "address";
            leaf address {
                ipr2cgen:after-node-add-static-arg "dev (../../name)";
                ipr2cgen:value-only;
                ipr2cgen:oper-arg-name "local";
                ipr2cgen:oper-combine-values "{\"separator\":\"/\", \"values\": [\"local\", \"prefixlen\"]}";
                description "ip address with cider, e.g 192.168.1.1/24";
                type ip-address-with-cider;
            }
        }
    }
    grouping link-bridge {
        container bridge-conf {
            list vlan {
                ipr2cgen:cmd-start;
                ipr2cgen:cmd-add "bridge vlan add";
                ipr2cgen:cmd-update "bridge vlan set";
                ipr2cgen:cmd-delete "bridge vlan delete";
                ipr2cgen:include-all-on-delete;
                must "(../../master and /links/bridge[name=current()/../../master]) or (/links/bridge[name=current()/../../name])" {
                    error-message "please set the link 'master' to a bridge, before configuring bridge vlan";
                }

                key "vid";
                unique "pvid";
                leaf vid {
                    ipr2cgen:after-node-add-static-arg "dev (../../../name)";
                    type uint16;
                    description
                        "specify vlan id";
                }
                leaf pvid {
                    ipr2cgen:flag;
                    type boolean;
                    description
                        "when enabled, this vlan will be considered a PVID at ingress.
                        Any untagged frames will be assigned to this VLAN.";
                }
                leaf untagged {
                    ipr2cgen:flag;
                    type boolean;
                    description
                        "the vlan specified is to be treated as untagged on egress.";
                }
                leaf self {
                    ipr2cgen:flag;
                    type boolean;
                    description
                        "the vlan is configured on the specified physical device.
                        Required if the device is the bridge device.";
                }
                leaf master {
                    ipr2cgen:flag;
                    type boolean;
                    description
                        "the vlan is configured on the software bridge (default).";
                }

            }
        }
    }

    grouping link-device {
        leaf device {
            must "../device != ../name" {
                error-message "Cannot reference the current link name, you can use other links";
            }
            must "(../mtu <= /links/link[name=current()/../device]/mtu) or (../mtu <= /links/bridge[name=current()/../device]/mtu)" {
                error-message "the specified 'device' mtu must be equal or greater than currnt link mtu";
            }
            ipr2cgen:arg-name "link";
            ipr2cgen:oper-arg-name "link";
            type union{
                type link-ref;
                type bridge-ref;
            }

            description "specifies the physical device to act operate on";
        }
    }

    grouping link-state {
        container state {
            config false;
            leaf-list flags {
                type enumeration {
                    enum "NO-CARRIER";
                    enum "LOOPBACK";
                    enum "BROADCAST";
                    enum "POINTOPOINT";
                    enum "MULTICAST";
                    enum "NOARP";
                    enum "ALLMULTI";
                    enum "PROMISC";
                    enum "MASTER";
                    enum "SLAVE";
                    enum "DEBUG";
                    enum "DYNAMIC";
                    enum "AUTOMEDIA";
                    enum "PORTSEL";
                    enum "NOTRAILERS";
                    enum "UP";
                    enum "LOWER_UP";
                    enum "DORMANT";
                    enum "ECHO";
                    enum "M-DOWN";
                }
                description "A list of flags representing various states and capabilities of the interface.
                Each flag denotes a specific characteristic or status";
            }
            leaf qdisc {
                type string; //TODO review
                description "Reference to the queuing discipline (qdisc) associated with the interface.";
            }
            leaf operstate {
                type enumeration {
                    enum "UP";
                    enum "DOWN";
                    enum "LOWERLAYERDOWN";
                    enum "UNKNOWN";
                    enum "NOTPRESENT";
                    enum "TESTING";
                    enum "DORMANT";
                }
                description "Represents the current operational state of the interface.";
            }
            leaf linkmode {
                type enumeration {
                    enum "DEFAULT";
                    enum "DORMANT";
                }
                description "Defines the current link mode of the interface.";
            }
            container stats64 {
                description "Contains 64-bit counters for various network statistics.
                Providing detailed information on the traffic handled by the interface.";
                container rx {
                    leaf bytes {
                        type uint64;
                        description "Total number of bytes received by the interface.";
                    }
                    leaf packets {
                        type uint64;
                        description "Total number of packets received by the interface.";
                    }
                    leaf errors {
                        type uint64;
                        description "Number of receive errors detected by the interface.";
                    }
                    leaf dropped {
                        type uint64;
                        description "Number of packets dropped by the interface due to various reasons, such as buffer overflows.";
                    }
                    leaf over_errors {
                        type uint64;
                        description "Count of receiver overruns, indicating packets lost because the receiver
                        couldn't handle incoming data quickly enough.";
                    }
                    leaf multicast {
                        type uint64;
                        description "Number of multicast packets received by the interface.";
                    }
                }
                container tx {
                    leaf bytes {
                        type uint64;
                        description "Total number of bytes transmitted by the interface.";
                    }
                    leaf packets {
                        type uint64;
                        description "Total number of packets transmitted by the interface.";
                    }
                    leaf errors {
                        type uint64;
                        description "Number of transmission errors detected by the interface.";
                    }
                    leaf dropped {
                        type uint64;
                        description "Number of packets that were not transmitted by the interface and were dropped.";
                    }
                    leaf carrier_errors {
                        type uint64;
                        description "Count of carrier-related errors on the interface.
                        typically indicating problems with the physical layer.";
                    }
                    leaf collisions {
                        type uint64;
                        description "Number of collision errors detected on the interface.";
                    }
                }
            }
        }
    }

    grouping tunnel-common {
        leaf local {
            ipr2cgen:oper-value-map "any:0.0.0.0";
            type inet:ipv4-address;
            description "specifies the fixed local ipv4 address for tunneled packets.
            It must be an address on another interface on the host.";
            default "0.0.0.0";
        }
        leaf remote {
            ipr2cgen:oper-value-map "any:0.0.0.0";
            type inet:ipv4-address;
            description "specifies the remote ipv4 address of the tunnel.";
            default "0.0.0.0";
        }
        leaf dev {
            ipr2cgen:oper-arg-name "link";
            type link-ref;
            description "specifies the physical device to use for tunnel endpoint communication.";
        }
    }

    grouping tunnel-keyed{
        leaf ikey {
            type yang:dotted-quad;
            description "specifies the tunnel input key (dotted-quad)";
        }
        leaf okey {
            type yang:dotted-quad;
            description "specifies the tunnel output key (dotted-quad)";
        }
    }

    grouping l3-tunnel-common {

        leaf encap {
            type enumeration{
                enum "fou";
                enum "gue";
                enum "none";
            }
            description
                "specifies type of secondary UDP encapsulation. \"fou\" indicates Foo-Over-UDP, \"gue\"
                indicates Generic UDP Encapsulation.";
        }
        choice encap-sport {
            default sport-auto;
            case sport-num{
                leaf sport {
                    ipr2cgen:arg-name "encap-sport";
                    type inet:port-number;
                    description
                        "specifies the source port in UDP encapsulation.";
                }
            }
            case sport-auto {
                leaf auto {
                    ipr2cgen:arg-name "encap-sport";
                    ipr2cgen:flag;
                    default "on";
                    type enumeration {
                        enum "on";
                    }
                    description
                        "'auto' indicates that the port number should be chosen automatically
                        (the kernel picks a flow based on the flow hash of the encapsulated packet)";
                }
            }

        }
        leaf encap-csum {
            type enumeration{
                enum "on";
            }
            ipr2cgen:on-node-delete "noencap-remcsum ";
            ipr2cgen:flag;
            description
                "specifies if UDP checksums are enabled in the secondary encapsulation.";
        }
        leaf encap-remcsum {
            type enumeration{
                enum "on";
            }
            ipr2cgen:on-node-delete "noencap-remcsum";
            ipr2cgen:flag;
            description
                "specifies if Remote Checksum Offload is enabled.
                This is only applicable for Generic UDP Encapsulation.";
        }
    }

    container links {
        description "ip-link - network device configuration";
        list vrf{
            ipr2cgen:cmd-start;
            ipr2cgen:cmd-add "ip link add";
            ipr2cgen:cmd-update "ip link set";
            ipr2cgen:cmd-delete "ip link delete";
            ipr2cgen:oper-cmd "ip address show type vrf";
            key "name";
            leaf name {
                ipr2cgen:after-node-add-static-arg "type vrf";
                ipr2cgen:oper-arg-name "ifname";
                type string;
                description "vrf name";
            }
            leaf table{
                type uint16;
                description "vrf table id";
                mandatory true;
            }
        }
        list link {
            ipr2cgen:cmd-add "ip link add";
            ipr2cgen:cmd-update "ip link set";
            ipr2cgen:cmd-delete "ip link delete";
            ipr2cgen:cmd-start;
            ipr2cgen:oper-cmd "ip address show";
            ipr2cgen:oper-stop-if "{\"info_kind\": [\"vti\", \"vlan\", \"vrf\", \"bridge\", \"vxlan\", \"gre\", \"gretab\"]}";
            key "name";
            description "ip-link - network device";
            leaf name {
                ipr2cgen:value-only-on-update;
                ipr2cgen:oper-arg-name "ifname";
                type string;
                description "link name";
            }
            uses link-device;
            uses link-essentials;
            uses link-advance;
            uses link-layer2;
            uses link-layer3;
            leaf type {
                ipr2cgen:oper-arg-name "info_kind";
                //                mandatory true;  // this should be mandatory, will be uncomment after fix #91
                type identityref {
                    base link-type;
                }
                description "specifies the type of the device";
            }
            leaf virtual_peer_name {
                ipr2cgen:arg-name "peer name";
                type string;
                description "specifies the virtual pair device name of the VETH/VXCAN tunnel.";
                must "(../iplink:type = 'iplink:veth') or (../iplink:type = 'iplink:vxcan')"{
                    error-message "virtual_peer_name can be only configured for veth or vxcan links.";
                }
            }
            uses link-bridge;
            container bond_slave {
                ipr2cgen:add-static-arg "type bond_slave";
                when "../master and /links/link[name=current()/../master]/type = 'iplink:bond'";
                description "set additional bonding related to link with master bond link";
                leaf queue_id{
                    must "/links/link[name=current()/../../master]/type = 'iplink:bond'" {
                        error-message "queue_id can only be confirgured if the link is part of bonding
                        (has a master link or type 'bond') ";
                    }
                    type uint16;
                    description "ID - set the slave's queue ID (a 16bit unsigned value)";
                }
                leaf prio {
                    type int32;
                    description "PRIORITY - set the slave's priority for active slave re-selection
                    during failover (a 32bit signed value). This option only valid for active-backup(1),
                    balance-tlb (5) and balance-alb (6) mode.";
                }
            }
            uses link-state;
        }
        list vti {
            ipr2cgen:cmd-add "ip link add";
            ipr2cgen:cmd-update "ip link set";
            ipr2cgen:cmd-delete "ip link delete";
            ipr2cgen:cmd-start;
            ipr2cgen:oper-cmd "ip address show type vti";
            key "name";
            leaf name {
                ipr2cgen:oper-arg-name "ifname";
                type string;
                description "vti tunnel interface name";
            }
            uses link-essentials;
            uses link-advance;
            container tunnel-info{
                ipr2cgen:add-static-arg "type vti";
                ipr2cgen:oper-sub-jobj "info_data";
                description "vti tunnel info details";
                uses tunnel-common;
                uses tunnel-keyed;
                leaf fwmark{
                    type string {
                        pattern '0x[0-9a-fA-F]+|\d+';
                    }
                    description "specify the fwmark value (0x0..0xffffffff)";
                }
            }
            uses link-state;
        }
        list vlan {
            ipr2cgen:cmd-add "ip link add";
            ipr2cgen:cmd-update "ip link set";
            ipr2cgen:cmd-delete "ip link delete";
            ipr2cgen:cmd-start;
            ipr2cgen:oper-cmd "ip address show type vlan";
            key "name";
            leaf name {
                ipr2cgen:oper-arg-name "ifname";
                type string;
                description "vlan name";
            }
            uses link-essentials;
            uses link-advance;
            uses link-device;
            uses link-layer2;
            uses link-layer3;
            container vlan-info {
                ipr2cgen:oper-sub-jobj "info_data";
                ipr2cgen:add-static-arg "type vlan";
                must "../iplink:device" {
                    description "VLAN configuration requires 'device' to be set";
                    error-message "VLAN configuration is not allowed without specifying 'device'";
                }
                description "vlan type interface paramters";
                leaf protocol {
                    ipr2cgen:oper-value-map "802.1Q:802.1q;802.1AD:802.1ad";
                    description "VLAN_PROTO - either 802.1Q or 802.1ad.";
                    default "802.1q";
                    type enumeration {
                        enum "802.1q";
                        enum "802.1ad";
                    }
                }
                leaf id {
                    type uint16;
                    description "VLAN ID";
                }
                leaf reorder_hdr {
                    ipr2cgen:oper-arg-name "flags";
                    ipr2cgen:oper-flag-map "REORDER_HDR:on;FLAG-UNSET:off";
                    description "{ on | off } - specifies whether ethernet headers are reordered or not (default is on).";
                    type enumeration {
                        enum "on";
                        enum "off";
                    }
                }
                leaf gvrp {
                    ipr2cgen:oper-arg-name "flags";
                    ipr2cgen:oper-flag-map "GVRP:on;FLAG-UNSET:off";
                    description "{ on | off } - specifies whether this VLAN should be
                    registered using GARP VLAN Registration Protocol.";
                    type enumeration {
                        enum "on";
                        enum "off";
                    }
                }
                leaf mvrp {
                    ipr2cgen:oper-arg-name "flags";
                    ipr2cgen:oper-flag-map "MVRP:on;FLAG-UNSET:off";
                    description "{ on | off } - specifies whether this VLAN should be registered
                    using Multiple VLAN Registration Protocol.";
                    type enumeration {
                        enum "on";
                        enum "off";
                    }
                }
                leaf loose_binding {
                    ipr2cgen:oper-arg-name "flags";
                    ipr2cgen:oper-flag-map "LOOSE_BINDING:on;FLAG-UNSET:off";
                    description "{ on | off } - specifies whether the VLAN device state is bound to the
                    physical device state.";
                    type enumeration {
                        enum "on";
                        enum "off";
                    }
                }
                leaf bridge_binding {
                    ipr2cgen:oper-arg-name "flags";
                    ipr2cgen:oper-flag-map "BRIDGE_BINDING:on;FLAG-UNSET:off";
                    description "{ on | off } - specifies whether the VLAN device link state tracks the state
                    of bridge ports that are members of the VLAN.";
                    type enumeration {
                        enum "on";
                        enum "off";
                    }
                }
                leaf-list ingress-qos-map {
                    type string {
                        pattern '\d+:\d+';
                    }
                    description "defines a mapping of VLAN header prio field to the Linux internal packet priority on
                    incoming frames. The format is FROM:TO with multiple mappings separated by spaces.";
                }
                leaf-list egress-qos-map {
                    type string {
                        pattern '\d+:\d+';
                    }
                    description "defines a mapping of Linux internal packet priority to VLAN header prio field but
                    for outgoing frames.The format is FROM:TO with multiple mappings separated by spaces.";
                }
            }
            uses link-state;
        }
        list vxlan {
            ipr2cgen:cmd-add "ip link add";
            ipr2cgen:cmd-update "ip link set";
            ipr2cgen:cmd-delete "ip link delete";
            ipr2cgen:cmd-start;
            ipr2cgen:oper-cmd "ip address show type vxlan";
            key "name";
            leaf name {
                ipr2cgen:oper-arg-name "ifname";
                type string;
                description "vxlan name";
            }
            uses link-essentials;
            uses link-advance;
            uses link-device;
            uses link-layer2;
            container vxlan-info {
                ipr2cgen:add-static-arg "type vxlan";
                ipr2cgen:oper-sub-jobj "info_data";
                description "vxlan configurations";
                leaf id {
                    type uint64;
                    mandatory true;
                    description
                        "VNI - specifies the VXLAN Network Identifier (or VXLAN Segment Identifier) to use.";
                }
                leaf dev {
                    ipr2cgen:oper-arg-name "link";
                    type link-ref;
                    description
                        "PHYS_DEV - specifies the physical device to use for tunnel endpoint communication.";
                }
                choice remote-or-grp {
                    case mcast-group{
                        leaf group {
                            must "../dev"{ error-message "vxlan-info 'dev' leaf is required when 'group' is specified."; }
                            type inet:ip-address;
                            description
                                "IPADDR - specifies the multicast IP address to join.";
                        }

                    }
                    case remote-address {
                        leaf remote {
                            type inet:ip-address;
                            description
                                "IPADDR - specifies the unicast destination IP address to use in outgoing packets
                                when the destination link layer address is not known in the VXLAN device forwarding database.";
                        }
                    }
                }
                leaf local {
                    type inet:ip-address;
                    description
                        "IPADDR - specifies the source IP address to use in outgoing packets.";
                    default "0.0.0.0";
                }
                leaf ttl {
                    type uint8{
                        range "0..255";
                    }
                    description
                        "TTL - specifies the TTL value to use in outgoing packets.";
                    default 0;
                }
                leaf tos {
                    type string {
                        pattern '([0-9A-Fa-f]{2}){1}';
                    }
                    description
                        "TOS - specifies the TOS value to use in outgoing packets.";
                    default "00";
                }
                leaf df {
                    type enumeration {
                        enum "set";
                        enum "unset";
                        enum "inherit";

                    }
                    default "unset";
                    description
                        "DF - specifies the usage of the Don't Fragment flag (DF) bit in outgoing
                        packets with IPv4 headers. The value inherit causes the bit to be copied from the original
                        IP header. The values unset and set cause the bit to be always unset or always set,
                        respectively. By default, the bit is not set.";
                }
                leaf dstport {
                    ipr2cgen:oper-arg-name "port";
                    type inet:port-number;
                    default 8472;
                    description
                        "PORT - specifies the UDP destination port to communicate to the remote
                        VXLAN tunnel endpoint.";
                }
                leaf srcport {
                    type string {
                        pattern '\d+\s+\d+';
                    }
                    default "0 0";
                    description
                        "MIN MAX - specifies the range of port numbers to use as UDP source ports
                        to communicate to the remote VXLAN tunnel endpoint. example: 7770 7779";
                }
                leaf learning {
                    ipr2cgen:on-node-delete "nolearning";
                    ipr2cgen:flag;
                    ipr2cgen:oper-value-map "true:on;false:off";
                    type enumeration {
                        enum "on";
                    }
                    description
                        "specifies if unknown source link layer addresses and IP addresses are entered
                        into the VXLAN device forwarding database.";

                }
                leaf rsc {
                    ipr2cgen:on-node-delete "norsc";
                    ipr2cgen:flag;
                    ipr2cgen:oper-value-map "true:on";
                    type enumeration {
                        enum "on";
                    }
                    description
                        "specifies if route short circuit is turned on.";

                }
                leaf proxy {
                    ipr2cgen:on-node-delete "noproxy";
                    ipr2cgen:flag;
                    ipr2cgen:oper-value-map "true:on";
                    type enumeration {
                        enum "on";
                    }
                    description
                        "specifies ARP proxy is turned on.";

                }
                leaf l2miss {
                    ipr2cgen:on-node-delete "nol2miss";
                    ipr2cgen:flag;
                    ipr2cgen:oper-value-map "true:on";
                    type enumeration {
                        enum "on";
                    }
                    description
                        "specifies if netlink LLADDR miss notifications are generated.";

                }
                leaf l3miss {
                    ipr2cgen:on-node-delete "nol3miss";
                    ipr2cgen:flag;
                    ipr2cgen:oper-value-map "true:on";
                    type enumeration {
                        enum "on";
                    }
                    description
                        "specifies if netlink IP ADDR miss notifications are generated.";

                }
                leaf udpcsum {
                    ipr2cgen:on-node-delete "noudpcsum";
                    ipr2cgen:flag;
                    ipr2cgen:oper-arg-name "udp_csum";
                    ipr2cgen:oper-value-map "true:on";
                    type enumeration {
                        enum "on";
                    }
                    description
                        "specifies if UDP checksum is calculated for transmitted packets over IPv4.";

                }
                leaf ageing {
                    type uint32;
                    default 300;
                    description
                        "SECONDS - specifies the lifetime in seconds of FDB entries learnt by the kernel.";
                }
                leaf maxaddress {
                    ipr2cgen:oper-arg-name "limit";
                    type uint32;
                    default 10000000;
                    description
                        "NUMBER - specifies the maximum number of FDB entries.";
                }
                leaf external {
                    ipr2cgen:on-node-delete "noexternal";
                    ipr2cgen:flag;
                    ipr2cgen:oper-value-map "true:on";
                    type enumeration {
                        enum "on";
                    }
                    description
                        "specifies whether an external control plane (e.g. ip route encap)
                        or the internal FDB should be used.";

                }
                leaf vnifilter {
                    ipr2cgen:on-node-delete "novnifilter";
                    ipr2cgen:flag;
                    ipr2cgen:oper-value-map "true:on";
                    type enumeration {
                        enum "on";
                    }
                    description
                        "specifies whether the vxlan device is capable of vni filtering.
                        Only works with a vxlan device with external flag set. once enabled,
                        bridge vni command is used to manage the vni filtering table on the device.
                        The device can only receive packets with vni's configured in the vni filtering table.

                        ";

                }
            }
            uses link-state;
        }
        list bridge {
            ipr2cgen:cmd-start;
            ipr2cgen:cmd-add "ip link add";
            ipr2cgen:cmd-update "ip link set";
            ipr2cgen:cmd-delete "ip link delete";
            ipr2cgen:oper-cmd "ip address show type bridge";
            key "name";
            leaf name {
                ipr2cgen:oper-arg-name "ifname";
                type string;
                description "brdige name";
            }
            uses link-essentials;
            uses link-advance;
            uses link-device;
            uses link-layer2;
            uses link-layer3;
            uses link-bridge;
            container br-info {
                ipr2cgen:add-static-arg "type bridge";
                ipr2cgen:oper-sub-jobj "info_data";
                description
                    "bridge configuraions";
                leaf ageing_time {
                    type uint64;
                    default 30000;
                    description
                        "GEING_TIME - configure the bridge's FDB entries ageing time,
                        ie the number of seconds a MAC address will be kept in the FDB after
                        a packet has been received from that address. after this time has passed,
                        entries are cleaned up.";
                }
                leaf forward_delay {
                    type uint64;
                    default 1500;
                    description
                        "FORWARD_DELAY - set the forwarding delay in seconds, ie the time spent in LISTENING state
                        (before moving to LEARNING) and in LEARNING state (before moving to FORWARDING).
                        Only relevant if STP is enabled.";
                }
                leaf hello_time {
                    type uint32{
                        range "10..1000";
                    }
                    default 200;
                    description
                        "HELLO_TIME - set the time in seconds between hello packets sent by the bridge,
                        when it is a root bridge or a designated bridges. Only relevant if STP is enabled.";

                }
                leaf max_age {
                    type uint32;
                    default 2000;
                    description
                        "MAX_AGE - set the hello packet timeout, ie the time in seconds until another
                        bridge in the spanning tree is assumed to be dead, after reception of its last
                        hello message. Only relevant if STP is enabled. Valid values are between 6 and 40.";
                }
                leaf stp_state {
                    type enumeration{
                        enum 0;
                        enum 1;
                    }
                    default 0;
                    description
                        "STP_STATE - turn spanning tree protocol on (STP_STATE == 1) or off (STP_STATE == 0). for this bridge.";
                }
                leaf priority {
                    type uint16;
                    default 32768;
                    description
                        "PRIORITY - set this bridge's spanning tree priority, used during STP root bridge election.";
                }
                leaf vlan_filtering {
                    type enumeration{
                        enum 0;
                        enum 1;
                    }
                    default 0;
                    description
                        "VLAN_FILTERING - turn VLAN filtering on (VLAN_FILTERING == 0) or off (VLAN_FILTERING == 0).
                        When disabled, the bridge will not consider the VLAN tag when handling packets.";
                }
                leaf vlan_protocol {
                    type enumeration{
                        enum "802.1Q";
                        enum "802.1ad";
                    }
                    default "802.1Q";
                    description
                        "set the protocol used for VLAN filtering.";
                }
                leaf vlan_default_pvid {
                    type uint16;
                    default 1;
                    description
                        "VLAN_DEFAULT_PVID - set the default PVID (native/untagged VLAN ID) for this bridge.";
                }
                leaf vlan_stats_enabled {
                    type enumeration {
                        enum 0;
                        enum 1;
                    }
                    default 1;
                    description
                        "VLAN_STATS_ENABLED - enable (VLAN_STATS_ENABLED == 1) or disable (VLAN_STATS_ENABLED == 0)
                        per-VLAN stats accounting.";
                }
                leaf vlan_stats_per_port {
                    type enumeration {
                        enum 0;
                        enum 1;
                    }
                    default 0;
                    description
                        "VLAN_STATS_PER_PORT - enable (VLAN_STATS_PER_PORT == 1) or disable (VLAN_STATS_PER_PORT == 0)
                        per-VLAN per-port stats accounting. Can be changed only when there are no port VLANs configured.";
                }
                leaf nf_call_iptables {
                    type enumeration {
                        enum 0;
                        enum 1;
                    }
                    default 0;
                    description
                        "NF_CALL_IPTABLES - enable (NF_CALL_IPTABLES == 1) or disable
                        (NF_CALL_IPTABLES == 0) iptables hooks on the bridge.";
                }
                leaf nf_call_arptables {
                    type enumeration {
                        enum 0;
                        enum 1;
                    }
                    default 0;
                    description
                        "NF_CALL_ARPTABLES - enable (NF_CALL_ARPTABLES = 1) or disable (NF_CALL_ARPTABLES == 0)
                        arptables hooks on the bridge.";
                }
            }
            uses link-state;
        }
        list gre {
            ipr2cgen:cmd-add "ip link add";
            ipr2cgen:cmd-update "ip link set";
            ipr2cgen:cmd-delete "ip link delete";
            ipr2cgen:cmd-start;
            key "name";
            leaf name {
                ipr2cgen:oper-arg-name "ifname";
                type string;
                description "vti tunnel interface name";
            }
            uses link-essentials;
            uses link-advance;
            container tunnel-info{
                ipr2cgen:on-update-include "tunnel-info/type";
                ipr2cgen:oper-sub-jobj "info_data";
                description "vti tunnel info details";
                leaf type {
                    type enumeration {
                        enum "gre";
                        enum "gretap";
                    }
                    default "gre";
                    description
                        "specify gre tunnel type, this can't be changed.";
                }
                uses tunnel-common;
                uses tunnel-keyed;
                leaf iseq {
                    type enumeration{
                        enum "on";
                    }
                    ipr2cgen:on-node-delete "noiseq";
                    ipr2cgen:flag;
                    description
                        "serialize packets. The iseq flag requires that all input packets are serialized.";
                }
                leaf oseq {
                    type enumeration{
                        enum "on";
                    }
                    ipr2cgen:on-node-delete "nooseq";
                    ipr2cgen:flag;
                    description
                        "serialize packets. The oseq flag enables sequencing of outgoing packets.";
                }
                leaf icsum {
                    type enumeration{
                        enum "on";
                    }
                    ipr2cgen:on-node-delete "noicsum";
                    ipr2cgen:flag;
                    description
                        "generate/require checksums for tunneled packets.The icsum flag requires that all
                        input packets have the correct checksum. ";
                }
                leaf ocsum {
                    type enumeration{
                        enum "on";
                    }
                    ipr2cgen:on-node-delete "noocsum";
                    ipr2cgen:flag;
                    description
                        "generate/require checksums for tunneled packets.
                        The ocsum flag calculates checksums for outgoing packets..";
                }
                leaf ttl {
                    type uint8{
                        range "0..255";
                    }
                    description
                        "TTL - specifies the TTL value to use in outgoing packets.";
                    default 0;
                }
                leaf tos {
                    type string {
                        pattern '([0-9A-Fa-f]{2}){1}';
                    }
                    description
                        "TOS - specifies the TOS value to use in outgoing packets.";
                    default "00";
                }
                leaf pmtudisc {
                    type enumeration{
                        enum "on";
                    }
                    ipr2cgen:on-node-delete "nopmtudisc";
                    ipr2cgen:flag;
                    description
                        "enables Path MTU Discovery on this tunnel.
                        It is enabled by default. Note that a fixed ttl is incompatible with this option: tunneling
                        with a fixed ttl always makes pmtu discovery.";
                }
                leaf ignore-df {
                    type enumeration{
                        enum "on";
                    }
                    ipr2cgen:on-node-delete "noignore-df";
                    ipr2cgen:flag;
                    description
                        "enables IPv4 DF suppression on this tunnel.
                        Normally datagrams that exceed the MTU will be fragmented;
                        the presence of the DF flag inhibits this, resulting instead in an ICMP Unreachable
                        (Fragmentation Required) message. Enabling this attribute causes the DF flag to be ignored.";
                }
                leaf fwmark{
                    type string {
                        pattern '0x[0-9a-fA-F]+|\d+';
                    }
                    description "specify the fwmark value (0x0..0xffffffff)";
                }

            }
            uses link-state;

        }
    }
}
